name: Pull Request
on:
  pull_request

# A note on debugging a github step:
#   You can ssh into the github action environment and poke around by using
#   https://github.com/marketplace/actions/debugging-with-tmate
#   Use `limit-access-to-actor: true` so only you can ssh into the environment!
#  
#   For example, to debug a failure, append this to the jobs list within the failing step
#   - name: Setup tmate session
#     if: ${{ failure() }}
#     uses: mxschmitt/action-tmate@v3
#     with:
#       limit-access-to-actor: true
#

# build docker image: actions/upload-artifact@v3, with path: /bin
# - build UX
#   - validate UX
#   - test UX unit tests
#   - validate agent
#   - agent tests
#   - build agent
#     - UX e2e tests

jobs: 
  build-docker-image:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Setup Buildx
        uses: docker/setup-buildx-action@v2
      - 
        name: Build and export image
        uses: docker/build-push-action@v3
        with:
          context: .
          build-args: BUILDKIT_INLINE_CACHE=1 
          pull: True
          file: build/package/Dockerfile
          tags: rstudio/connect-client:latest
          outputs: type=docker,dest=/tmp/build-image.tar
      -
        name: Upload image artifact
        uses: actions/upload-artifact@v3
        with:
          name: image-tar
          path: /tmp/build-image.tar

  build-ux:
    needs: build-docker-image
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Setup Just
        uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: image-tar
          path: /tmp
      -
        name: Load image
        run: |
          docker load --input /tmp/build-image.tar
          docker image ls -a
      -
        name: Build the UX
        run: just build-web
      -
        name: Upload image artifact
        uses: actions/upload-artifact@v3
        with:
          name: web-ux
          path: /web/dist/spa

  validate-ux:
    needs: build-ux
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Setup Just
        uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: image-tar
          path: /tmp
      -
        name: Load image
        run: |
          docker load --input /tmp/build-image.tar
          docker image ls -a
      -
        name: Validate the UX
        run: just web/validate

  test-ux:
    needs: build-ux
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Setup Just
        uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: image-tar
          path: /tmp
      -
        name: Load image
        run: |
          docker load --input /tmp/build-image.tar
          docker image ls -a
      -
        name: UX Unit Tests
        run: just web/test-unit
      -
        name: UX Go Race Tests
        run: just web/test-race

  validate-agent:
    needs: build-ux
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Setup Just
        uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: image-tar
          path: /tmp
      -
        name: Load image
        run: |
          docker load --input /tmp/build-image.tar
          docker image ls -a
      -
        name: Validate Agent
        run: |
          just validate-agent
          just validate-post

  agent-tests:
    needs: build-ux
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Setup Just
        uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: image-tar
          path: /tmp
      -
        name: Load image
        run: |
          docker load --input /tmp/build-image.tar
          docker image ls -a
      - 
        name: Agent Unit Tests
        run: just test-agent

  build-agent:
    needs: build-ux
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Setup Just
        uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: image-tar
          path: /tmp
      -
        name: Load image
        run: |
          docker load --input /tmp/build-image.tar
          docker image ls -a
      -
        name: Build agent
        run: just build-agent
      -
        name: Agent build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: agent-artifacts
          path: bin/

  ux-e2e-tests:
    needs: build-agent
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Setup Just
        uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Download docker image
        uses: actions/download-artifact@v3
        with:
          name: image-tar
          path: /tmp
      -
        name: Load image
        run: |
          docker load --input /tmp/build-image.tar
          docker image ls -a
      -
        name: Download built agents
        uses: actions/download-artifact@v3
        with:
          name: agent-artifacts
          path: /bin
      - 
        name: UX E2E Tests
        run: just web/test-e2e

  test-windows-client:
    needs: build-agent
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: extractions/setup-just@v1
      - uses: actions/download-artifact@v3
        with:
          path: bin/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Windows Tests
        env:
          CLIENT: windows-latest
          # bats reads the load libraries from relative path only in Windows
          BATS_SUPPORT_LIB: ..\..\libs\bats-support\load.bash
          BATS_ASSERT_LIB: ..\..\libs\bats-assert\load
        run: |
          cp -r bin\artifact\* bin\ && chmod +x bin\*\*
          just test/bats-install
          $env:Path += ";$env:GITHUB_WORKSPACE\test\libs\bats-core\bin"
          $env:BINARY_PATH = "$env:GITHUB_WORKSPACE\bin\windows-amd64\connect-client"
          cd $env:GITHUB_WORKSPACE\test
          just run-client $env:CLIENT

  test-macos-client:
    needs: build-agent
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: extractions/setup-just@v1
      - uses: actions/download-artifact@v3
        with:
          path: bin/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run macos
        env:
          CLIENT: macos-latest
          BATS_SUPPORT_LIB: ${{ github.workspace }}/test/libs/bats-support/load
          BATS_ASSERT_LIB: ${{ github.workspace }}/test/libs/bats-assert/load
          BINARY_PATH: ${{ github.workspace }}/bin/darwin-amd64/connect-client
        run: |
          cp -r bin/artifact/* bin/ && chmod +x bin/*/*
          just test/bats-install
          PATH="$PATH:${{ github.workspace }}/test/libs/bats-core/bin"
          cd ${{ github.workspace }}/test
          just run-client ${CLIENT}

  test-linux-clients:
    needs: build-agent
    runs-on: ubuntu-latest
    strategy:
      matrix:
        CLIENT:
          - linux-amd64
          - linux-arm64
    steps:
      - uses: actions/checkout@v3
      - uses: extractions/setup-just@v1
      - uses: actions/download-artifact@v3
        with:
          path: bin/
      # these are required to run docker on amd64 and arm64 platforms
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run Linux Tests
        env:
          CLIENT: "${{ matrix.CLIENT }}"
        run: |
          cp -r bin/artifact/* bin/ && chmod +x bin/*/*
          just test/build ${CLIENT}
          just test/run-client ${CLIENT}
