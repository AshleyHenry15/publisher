set shell := ["bash", "-uc"]

export TARGET_SERVER := env_var_or_default("TARGET_SERVER", "http://localhost:3939")

_tag := "rstudio/connect-client"

build target:
  #!/usr/bin/env bash
  if [[ {{target}} =~ "linux-amd64" ]]; then
    _platform="linux/amd64"
  elif [[ {{target}} =~ "linux-arm64" ]]; then
    _platform="linux/arm64"
  fi

  docker build \
    --platform "${_platform}" \
    --build-arg BUILDKIT_INLINE_CACHE=1 \
    --build-arg platform={{target}} \
    --build-arg FUZZBUCKET_CREDENTIALS="$FUZZBUCKET_CREDENTIALS" \
    --build-arg FUZZBUCKET_URL="$FUZZBUCKET_URL" \
    --build-arg FUZZBUCKET_SSH_KEY="$FUZZBUCKET_SSH_KEY" \
    --pull \
    --tag {{_tag}}-{{target}}:latest \
    ./docker

build-clean target:
  #!/usr/bin/env bash
  if [[ {{target}} =~ "linux-amd64" ]]; then
    _platform="linux/amd64"
  elif [[ {{target}} =~ "linux-arm64" ]]; then
    _platform="linux/arm64"
  fi

  docker build \
    --no-cache \
    --platform "${_platform}" \
    --build-arg BUILDKIT_INLINE_CACHE=1 \
    --build-arg platform={{target}} \
    --pull \
    --progress=plain \
    --tag {{_tag}}-{{target}}:latest \
    ./docker

# use this to test your local os
local_init-connect target:
  #!/usr/bin/env bash
  pip install -r ./setup/requirements.txt
  echo "${FUZZBUCKET_SSH_KEY}" > .fuzzbucket-ssh-key
  chmod 600 .fuzzbucket-ssh-key
  export SSH_OPTIONS="-i.fuzzbucket-ssh-key" && \
  export TEST_SCENARIO="${TEST_SCENARIO}" && \
  just publishing-tests {{target}} clean

# use this when testing against linux os
docker_init-connect target:
  #!/usr/bin/env bash
  if [[ {{target}} =~ "linux-amd64" ]]; then
    _platform="linux/amd64"
  elif [[ {{target}} =~ "linux-arm64" ]]; then
    _platform="linux/arm64"
  fi
  if [[ {{target}} =~ "linux" ]]; then
    docker run \
    --platform "${_platform}" \
    -e DOCKER="false" \
    -e TEST_SCENARIO=${TEST_SCENARIO} \
    -v "$(pwd)"/../:/publishing-client \
    -w /publishing-client/ \
    --rm {{_tag}}-{{target}} \
    just test/local_init-connect {{target}} clean
  fi

publishing-tests target:
  #!/usr/bin/env bash
  echo "TEST SCENARIO: ${TEST_SCENARIO}"
  pip install -r ./setup/requirements.txt
  # python setup/client-setup.py
  if [[ ${TEST_SCENARIO} == "all_deployments" ]]; then
    deployments=$(python deploy_helper.py)
    echo "deployments: ${deployments}"
    for i in ${deployments}
    do
      DEPLOYMENT=./test/sample-content/python/$i
      echo "DEPLOYMENT:${DEPLOYMENT}"
      source ./environments/.${TEST_SCENARIO}
      export CMD_ARGS="${CMD_ARGS}" && \
      export CONNECT_API_KEY=$(echo -n admin | md5sum | cut -f1 -d" ") && \
      export CONNECT_SERVER="http://$(python setup/connect-setup.py):3939" && \
      just ../web/build-and-test-ci-e2e {{target}}
    done
  else
      source ./environments/.basic
      export CMD_ARGS="${CMD_ARGS}" && \
      export CONNECT_API_KEY=$(echo -n admin | md5sum | cut -f1 -d" ") && \
      export CONNECT_SERVER="http://$(python setup/connect-setup.py):3939" && \
      just ../web/build-and-test-ci-e2e {{target}}
  fi

clean:
  #!/usr/bin/env bash
  rm -rf ./sample-content/python/*/rsconnect-python/

run-client target:
  #!/usr/bin/env bash
  if [[ {{target}} =~ "linux-amd64" ]]; then
    _platform="linux/amd64"
  elif [[ {{target}} =~ "linux-arm64" ]]; then
    _platform="linux/arm64"
  fi
  if [[ {{target}} =~ "linux" ]]; then
    docker run \
    --platform "${_platform}" \
    -e BATS_SUPPORT_LIB="/libs/bats-support/load" \
    -e BATS_ASSERT_LIB="/libs/bats-assert/load" \
    -e BINARY_PATH=/publishing-client/bin/{{target}}/connect-client \
    -v "$(pwd)"/../:/publishing-client \
    -w /publishing-client/ \
    --rm {{_tag}}-{{target}} just test/_test-client {{target}}
  else
    just _test-client {{target}}
  fi

build-binary target:
  #!/usr/bin/env bash
  if [[ {{target}} =~ "linux-amd64" ]]; then
    _platform="linux/amd64"
  elif [[ {{target}} =~ "linux-arm64" ]]; then
    _platform="linux/arm64"
  fi
  if [[ {{target}} =~ "linux" ]]; then
    docker run \
    --platform "${_platform}" \
    -v "$(pwd)"/../:/publishing-client \
    -w /publishing-client/ \
    -e DOCKER="false" \
    --rm -it {{_tag}}-{{target}} \
    just build
  fi


# local-ui-client target:
#   #!/usr/bin/env bash
#   if [[ {{target}} =~ "linux" ]]; then
#     docker run \
#     -v "$(pwd)"/../:/publishing-client \
#     -w /publishing-client/ \
#     --rm {{_tag}}-{{target}} ../bin/{{target}}/connect-client publish-ui ./test/content/simple-notebook/ --listen=localhost:9999
#   elif [[ {{target}} =~ "windows" ]]; then
#     set shell := ["powershell.exe", "-c"] \
#     ..\bin\artifact\windows-amd64\connect-client.exe publish-ui test/content/simple-notebook/ --listen=localhost:9999
#   elif [[ {{target}} =~ "macos" || {{target}} =~ "darwin" ]]; then
#     ../bin/darwin-amd64/connect-client publish-ui \
#     sample-content/fastapi-simple --listen=127.0.0.1:9999
#   fi
#     docker run \
#     --platform "${_platform}" \
#     -v "$(pwd)"/../:/publishing-client \
#     -w /publishing-client/ \
#     -e DOCKER="false" \
#     --rm {{_tag}}-{{target}} just build
#   elif [[ {{target}} =~ "windows" ]]; then
#     just _test-client windows-amd64
#   elif [[ {{target}} =~ "macos" ]]; then
#     just _test-client darwin-amd64
#   fi


_test-client target:
  bats --tap -T -r ./bats/

run-client-local target:
  #!/usr/bin/env bash
  just bats-install && \
  BATS_SUPPORT_LIB={{invocation_directory()}}/libs/bats-support/load \
  BATS_ASSERT_LIB={{invocation_directory()}}/libs/bats-assert/load \
  BINARY_PATH=../bin/{{target}}/connect-client \
  ./libs/bats-core/bin/bats --tap -T -r ./bats/

bats-install:
  #!/usr/bin/env bash
  if [[ ! -d ./libs ]]; then
    git clone --depth=1 https://github.com/bats-core/bats-core.git ./libs/bats-core && \
    ./libs/bats-core/install.sh ./libs/bats-core/installation && \
    git clone --depth=1 https://github.com/ztombol/bats-support.git ./libs/bats-support && \
    git clone --depth=1 https://github.com/ztombol/bats-assert.git ./libs/bats-assert
  fi

bash target:
  #!/usr/bin/env bash
  if [[ {{target}} =~ "linux-amd64" ]]; then
  _platform="linux/amd64"
  elif [[ {{target}} =~ "linux-arm64" ]]; then
  _platform="linux/arm64"
  fi
  if [[ {{target}} =~ "linux" ]]; then
    docker run -it \
      --platform "${_platform}" \
      -v "$(pwd)"/../:/publishing-client \
      -w /publishing-client/test \
      -e DOCKER="false" \
      --rm {{_tag}}-{{target}} \
      /bin/bash
  fi