alias c := clean
alias i := install
alias t := test

# RUNNER_OS from gh actions for windows tests
export RUNNER_OS := env_var_or_default("RUNNER_OS", "local")

_ci := env_var_or_default("CI", "false")

_debug := env_var_or_default("DEBUG", "false")

_with_debug := if _debug == "true" {
        "set -x pipefail"
    } else {
        ""
    }

default:
    #!/usr/bin/env bash
    set -eou pipefail
    {{ _with_debug }}

    just install
    just test

# Deletes ephemeral project files (i.e., cleans the project).
clean:
    #!/usr/bin/env bash
    set -eou pipefail
    {{ _with_debug }}

    rm -rf node_modules


# Install dependencies
install:
    #!/usr/bin/env bash
    set -eou pipefail
    {{ _with_debug }}

    npm install

# Executes commands via `npm`. Equivalent to `npm run`. Provides arbitrary command chaining inside of Docker from project root (i.e., `just bats run test`)
run *args:
    #!/usr/bin/env bash
    set -eou pipefail
    {{ _with_debug }}

    npm run {{ args }}


# Executes Cypress tests
test-deploy:
    #!/usr/bin/env bash
    set -eou pipefail
    {{ _with_debug }}
        pip install -r ../setup/requirements.txt
    export CONNECT_SERVER="$(python ../setup/connect_setup.py)"
    export CONNECT_API_KEY="$(python ../setup/gen_apikey.py 'admin')"
    export CYPRESS_CONNECT_ADDRESS="${CONNECT_SERVER}"
    exe=$(just ../../executable-path)

    if [ ! -f $exe ]; then
        echo "error: Missing executable $exe. Run \`just build\`." 1>&2
        exit 1
    fi

    if [[ ${RUNNER_OS} =~ "Windows" ]]; then \
        EXE=$exe npm run contract
    else
        EXE=$exe npm run contract
    fi
